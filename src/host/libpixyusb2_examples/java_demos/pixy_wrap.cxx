/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdint.h>		// Use the C99 official header


#define SWIG_FILE_WITH_INIT
#include "util.h"
#include "TPixy2.h"
#include "Pixy2Line.h"
#include "Pixy2CCC.h"
#include "libpixyusb2.h"


typedef struct Block BlockArray;

SWIGINTERN BlockArray *new_BlockArray(int nelements){
  return new struct Block[nelements]();
}
SWIGINTERN void delete_BlockArray(BlockArray *self){
  delete [] self;
}
SWIGINTERN Block BlockArray_getitem(BlockArray *self,int index){
  return self[index];
}
SWIGINTERN void BlockArray_setitem(BlockArray *self,int index,Block value){
  self[index] = value;
}
SWIGINTERN Block *BlockArray_cast(BlockArray *self){
  return self;
}
SWIGINTERN BlockArray *BlockArray_frompointer(Block *t){
  return (BlockArray *) t;
}

typedef struct Vector VectorArray;

SWIGINTERN VectorArray *new_VectorArray(int nelements){
  return new struct Vector[nelements]();
}
SWIGINTERN void delete_VectorArray(VectorArray *self){
  delete [] self;
}
SWIGINTERN Vector VectorArray_getitem(VectorArray *self,int index){
  return self[index];
}
SWIGINTERN void VectorArray_setitem(VectorArray *self,int index,Vector value){
  self[index] = value;
}
SWIGINTERN Vector *VectorArray_cast(VectorArray *self){
  return self;
}
SWIGINTERN VectorArray *VectorArray_frompointer(Vector *t){
  return (VectorArray *) t;
}

typedef struct IntersectionLine IntersectionLineArray;

SWIGINTERN IntersectionLineArray *new_IntersectionLineArray(int nelements){
  return new struct IntersectionLine[nelements]();
}
SWIGINTERN void delete_IntersectionLineArray(IntersectionLineArray *self){
  delete [] self;
}
SWIGINTERN IntersectionLine IntersectionLineArray_getitem(IntersectionLineArray *self,int index){
  return self[index];
}
SWIGINTERN void IntersectionLineArray_setitem(IntersectionLineArray *self,int index,IntersectionLine value){
  self[index] = value;
}
SWIGINTERN IntersectionLine *IntersectionLineArray_cast(IntersectionLineArray *self){
  return self;
}
SWIGINTERN IntersectionLineArray *IntersectionLineArray_frompointer(IntersectionLine *t){
  return (IntersectionLineArray *) t;
}

typedef struct Barcode BarcodeArray;

SWIGINTERN BarcodeArray *new_BarcodeArray(int nelements){
  return new struct Barcode[nelements]();
}
SWIGINTERN void delete_BarcodeArray(BarcodeArray *self){
  delete [] self;
}
SWIGINTERN Barcode BarcodeArray_getitem(BarcodeArray *self,int index){
  return self[index];
}
SWIGINTERN void BarcodeArray_setitem(BarcodeArray *self,int index,Barcode value){
  self[index] = value;
}
SWIGINTERN Barcode *BarcodeArray_cast(BarcodeArray *self){
  return self;
}
SWIGINTERN BarcodeArray *BarcodeArray_frompointer(Barcode *t){
  return (BarcodeArray *) t;
}

extern int init();

/*!
  @brief       Select active running program on Pixy
  @param[in]   program_name  "color_connected_components"  Block detection program
                             "line"                        Line feature detection program
*/
extern int change_prog (const char *  program_name);

/*!
  @brief       Gets the Pixy sensor frame width.
  @return      Returns Pixy sensor width (in number of pixels) that is being sent to the host.
*/
extern int get_frame_width ();

/*!
  @brief       Gets the Pixy sensor frame height.
  @return      Returns Pixy sensor height (in number of pixels) that is being sent to the host.
*/
extern int get_frame_height ();

/*!
  @brief       Copy 'max_blocks' number of blocks to the address 'blocks'.
  @param[in]   max_blocks  Maximum number of blocks that will be copied.
  @param[out]  blocks      Address to copy the blocks data.
  @return      Number of blocks copied to 'blocks'.
*/
extern int ccc_get_blocks (int  max_blocks, BlockArray *  blocks);

extern void line_get_all_features ();

extern void line_get_main_features ();

/*!
  @brief       Copy 'max_intersections' number of intersections to the address 'intersections'.
  @param[in]   max_intersections  Maximum number of intersection objects that will be copied.
  @param[out]  intersections      Address to copy the intersection data.
  @return      Number of intersections copied to 'intersections'.
*/
extern int line_get_intersections (int  max_intersections, IntersectionLineArray *  intersections);

/*!
  @brief       Copy 'max_vectors' number of vectors to the address 'vectors'.
  @param[in]   max_vectors        Maximum number of vector objects that will be copied.
  @param[out]  vectors            Address to copy the vector data.
  @return      Number of vectors copied to 'vectors'.
*/
extern int line_get_vectors (int max_vectors, VectorArray *  vectors);

/*!
  @brief       Copy 'max_barcode' number of barcodes to the address 'barcodes'.
  @param[in]   max_barcodes  Maximum number of barcode objects that will be copied.
  @param[out]  barcodes      Address to copy the barcode data.
  @return      Number of barcode objects copied to 'barcodes'.
*/
extern int line_get_barcodes (int  max_barcodes, BarcodeArray *  barcodes);

/*!
  @brief       Set servo position
  @param[in]   S1_Position  Servo 1 position
  @param[in]   S2_Position  Servo 2 position
*/
extern void set_servos (int  S1_Position, int  S2_Position);


/*!
  @brief       Get pixel color components at the (X, Y) position on Pixy's sensor.
  @param[in]   X      X position of color pixel to get.
  @param[in]   Y      Y position of color pixel to get.
  @param[out]  Red    Memory address to write the Red color component value to.
  @param[out]  Green  Memory address to write the Green color component value to.
  @param[out]  Blue   Memory address to write the Blue color component value to.
*/
extern void video_get_RGB (int  X, int  Y, uint8_t *  Red, uint8_t *  Green, uint8_t *  Blue);


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_new_1BlockArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BlockArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BlockArray *)new_BlockArray(arg1);
  *(BlockArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_delete_1BlockArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BlockArray *arg1 = (BlockArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BlockArray **)&jarg1; 
  delete_BlockArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_BlockArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  BlockArray *arg1 = (BlockArray *) 0 ;
  int arg2 ;
  Block result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BlockArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = BlockArray_getitem(arg1,arg2);
  *(Block **)&jresult = new Block((const Block &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_BlockArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  BlockArray *arg1 = (BlockArray *) 0 ;
  int arg2 ;
  Block arg3 ;
  Block *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(BlockArray **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(Block **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Block");
    return ;
  }
  arg3 = *argp3; 
  BlockArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_BlockArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BlockArray *arg1 = (BlockArray *) 0 ;
  Block *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BlockArray **)&jarg1; 
  result = (Block *)BlockArray_cast(arg1);
  *(Block **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_BlockArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Block *arg1 = (Block *) 0 ;
  BlockArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  result = (BlockArray *)BlockArray_frompointer(arg1);
  *(BlockArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_new_1VectorArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  VectorArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (VectorArray *)new_VectorArray(arg1);
  *(VectorArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_delete_1VectorArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VectorArray *arg1 = (VectorArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VectorArray **)&jarg1; 
  delete_VectorArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_VectorArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  VectorArray *arg1 = (VectorArray *) 0 ;
  int arg2 ;
  Vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VectorArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = VectorArray_getitem(arg1,arg2);
  *(Vector **)&jresult = new Vector((const Vector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_VectorArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  VectorArray *arg1 = (VectorArray *) 0 ;
  int arg2 ;
  Vector arg3 ;
  Vector *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(VectorArray **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(Vector **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Vector");
    return ;
  }
  arg3 = *argp3; 
  VectorArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_VectorArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  VectorArray *arg1 = (VectorArray *) 0 ;
  Vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VectorArray **)&jarg1; 
  result = (Vector *)VectorArray_cast(arg1);
  *(Vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_VectorArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector *arg1 = (Vector *) 0 ;
  VectorArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector **)&jarg1; 
  result = (VectorArray *)VectorArray_frompointer(arg1);
  *(VectorArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_new_1IntersectionLineArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  IntersectionLineArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (IntersectionLineArray *)new_IntersectionLineArray(arg1);
  *(IntersectionLineArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_delete_1IntersectionLineArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IntersectionLineArray *arg1 = (IntersectionLineArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IntersectionLineArray **)&jarg1; 
  delete_IntersectionLineArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_IntersectionLineArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  IntersectionLineArray *arg1 = (IntersectionLineArray *) 0 ;
  int arg2 ;
  IntersectionLine result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntersectionLineArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = IntersectionLineArray_getitem(arg1,arg2);
  *(IntersectionLine **)&jresult = new IntersectionLine((const IntersectionLine &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_IntersectionLineArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  IntersectionLineArray *arg1 = (IntersectionLineArray *) 0 ;
  int arg2 ;
  IntersectionLine arg3 ;
  IntersectionLine *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(IntersectionLineArray **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(IntersectionLine **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null IntersectionLine");
    return ;
  }
  arg3 = *argp3; 
  IntersectionLineArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_IntersectionLineArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IntersectionLineArray *arg1 = (IntersectionLineArray *) 0 ;
  IntersectionLine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntersectionLineArray **)&jarg1; 
  result = (IntersectionLine *)IntersectionLineArray_cast(arg1);
  *(IntersectionLine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_IntersectionLineArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IntersectionLine *arg1 = (IntersectionLine *) 0 ;
  IntersectionLineArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntersectionLine **)&jarg1; 
  result = (IntersectionLineArray *)IntersectionLineArray_frompointer(arg1);
  *(IntersectionLineArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_new_1BarcodeArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BarcodeArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BarcodeArray *)new_BarcodeArray(arg1);
  *(BarcodeArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_delete_1BarcodeArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BarcodeArray *arg1 = (BarcodeArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BarcodeArray **)&jarg1; 
  delete_BarcodeArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_BarcodeArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  BarcodeArray *arg1 = (BarcodeArray *) 0 ;
  int arg2 ;
  Barcode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BarcodeArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = BarcodeArray_getitem(arg1,arg2);
  *(Barcode **)&jresult = new Barcode((const Barcode &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_BarcodeArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  BarcodeArray *arg1 = (BarcodeArray *) 0 ;
  int arg2 ;
  Barcode arg3 ;
  Barcode *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BarcodeArray **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(Barcode **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Barcode");
    return ;
  }
  arg3 = *argp3; 
  BarcodeArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_BarcodeArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BarcodeArray *arg1 = (BarcodeArray *) 0 ;
  Barcode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BarcodeArray **)&jarg1; 
  result = (Barcode *)BarcodeArray_cast(arg1);
  *(Barcode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_BarcodeArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Barcode *arg1 = (Barcode *) 0 ;
  BarcodeArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Barcode **)&jarg1; 
  result = (BarcodeArray *)BarcodeArray_frompointer(arg1);
  *(BarcodeArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_frc_robot_pixy_pixyJNI_init(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)init();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_frc_robot_pixy_pixyJNI_change_1prog(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)change_prog((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_frc_robot_pixy_pixyJNI_get_1frame_1width(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)get_frame_width();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_frc_robot_pixy_pixyJNI_get_1frame_1height(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)get_frame_height();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_frc_robot_pixy_pixyJNI_ccc_1get_1blocks(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  int arg1 ;
  BlockArray *arg2 = (BlockArray *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(BlockArray **)&jarg2; 
  result = (int)ccc_get_blocks(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_line_1get_1all_1features(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  line_get_all_features();
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_line_1get_1main_1features(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  line_get_main_features();
}


SWIGEXPORT jint JNICALL Java_frc_robot_pixy_pixyJNI_line_1get_1intersections(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  int arg1 ;
  IntersectionLineArray *arg2 = (IntersectionLineArray *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(IntersectionLineArray **)&jarg2; 
  result = (int)line_get_intersections(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_frc_robot_pixy_pixyJNI_line_1get_1vectors(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  int arg1 ;
  VectorArray *arg2 = (VectorArray *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(VectorArray **)&jarg2; 
  result = (int)line_get_vectors(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_frc_robot_pixy_pixyJNI_line_1get_1barcodes(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  int arg1 ;
  BarcodeArray *arg2 = (BarcodeArray *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(BarcodeArray **)&jarg2; 
  result = (int)line_get_barcodes(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_set_1servos(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  int arg1 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  set_servos(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_video_1get_1RGB(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jshortArray jarg3, jshortArray jarg4, jshortArray jarg5) {
  int arg1 ;
  int arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  uint8_t temp3 ;
  uint8_t temp4 ;
  uint8_t temp5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp3 = (uint8_t)0;
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp4 = (uint8_t)0;
    arg4 = &temp4; 
  }
  {
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg5) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp5 = (uint8_t)0;
    arg5 = &temp5; 
  }
  video_get_RGB(arg1,arg2,arg3,arg4,arg5);
  {
    jshort jvalue = (jshort)temp3;
    jenv->SetShortArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jshort jvalue = (jshort)temp4;
    jenv->SetShortArrayRegion(jarg4, 0, 1, &jvalue);
  }
  {
    jshort jvalue = (jshort)temp5;
    jenv->SetShortArrayRegion(jarg5, 0, 1, &jvalue);
  }
  
  
  
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1signature_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Block *arg1 = (Block *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_signature = arg2;
}


SWIGEXPORT jint JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1signature_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Block *arg1 = (Block *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  result = (uint16_t) ((arg1)->m_signature);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Block *arg1 = (Block *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_x = arg2;
}


SWIGEXPORT jint JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Block *arg1 = (Block *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  result = (uint16_t) ((arg1)->m_x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Block *arg1 = (Block *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_y = arg2;
}


SWIGEXPORT jint JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Block *arg1 = (Block *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  result = (uint16_t) ((arg1)->m_y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Block *arg1 = (Block *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_width = arg2;
}


SWIGEXPORT jint JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Block *arg1 = (Block *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  result = (uint16_t) ((arg1)->m_width);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Block *arg1 = (Block *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT jint JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Block *arg1 = (Block *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  result = (uint16_t) ((arg1)->m_height);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1angle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Block *arg1 = (Block *) 0 ;
  int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  arg2 = (int16_t)jarg2; 
  if (arg1) (arg1)->m_angle = arg2;
}


SWIGEXPORT jshort JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1angle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Block *arg1 = (Block *) 0 ;
  int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  result = (int16_t) ((arg1)->m_angle);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Block *arg1 = (Block *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_index = arg2;
}


SWIGEXPORT jshort JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Block *arg1 = (Block *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  result = (uint8_t) ((arg1)->m_index);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1age_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Block *arg1 = (Block *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_age = arg2;
}


SWIGEXPORT jshort JNICALL Java_frc_robot_pixy_pixyJNI_Block_1m_1age_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Block *arg1 = (Block *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Block **)&jarg1; 
  result = (uint8_t) ((arg1)->m_age);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_new_1Block(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Block *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Block *)new Block();
  *(Block **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_delete_1Block(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Block *arg1 = (Block *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Block **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Vector_1m_1x0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Vector *arg1 = (Vector *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_x0 = arg2;
}


SWIGEXPORT jshort JNICALL Java_frc_robot_pixy_pixyJNI_Vector_1m_1x0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Vector *arg1 = (Vector *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector **)&jarg1; 
  result = (uint8_t) ((arg1)->m_x0);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Vector_1m_1y0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Vector *arg1 = (Vector *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_y0 = arg2;
}


SWIGEXPORT jshort JNICALL Java_frc_robot_pixy_pixyJNI_Vector_1m_1y0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Vector *arg1 = (Vector *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector **)&jarg1; 
  result = (uint8_t) ((arg1)->m_y0);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Vector_1m_1x1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Vector *arg1 = (Vector *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_x1 = arg2;
}


SWIGEXPORT jshort JNICALL Java_frc_robot_pixy_pixyJNI_Vector_1m_1x1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Vector *arg1 = (Vector *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector **)&jarg1; 
  result = (uint8_t) ((arg1)->m_x1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Vector_1m_1y1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Vector *arg1 = (Vector *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_y1 = arg2;
}


SWIGEXPORT jshort JNICALL Java_frc_robot_pixy_pixyJNI_Vector_1m_1y1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Vector *arg1 = (Vector *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector **)&jarg1; 
  result = (uint8_t) ((arg1)->m_y1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Vector_1m_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Vector *arg1 = (Vector *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_index = arg2;
}


SWIGEXPORT jshort JNICALL Java_frc_robot_pixy_pixyJNI_Vector_1m_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Vector *arg1 = (Vector *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector **)&jarg1; 
  result = (uint8_t) ((arg1)->m_index);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_Vector_1m_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Vector *arg1 = (Vector *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT jshort JNICALL Java_frc_robot_pixy_pixyJNI_Vector_1m_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Vector *arg1 = (Vector *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector **)&jarg1; 
  result = (uint8_t) ((arg1)->m_flags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_new_1Vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Vector *)new Vector();
  *(Vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_delete_1Vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Vector *arg1 = (Vector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Vector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_IntersectionLine_1m_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  IntersectionLine *arg1 = (IntersectionLine *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntersectionLine **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_index = arg2;
}


SWIGEXPORT jshort JNICALL Java_frc_robot_pixy_pixyJNI_IntersectionLine_1m_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  IntersectionLine *arg1 = (IntersectionLine *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntersectionLine **)&jarg1; 
  result = (uint8_t) ((arg1)->m_index);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_IntersectionLine_1m_1reserved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  IntersectionLine *arg1 = (IntersectionLine *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntersectionLine **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_reserved = arg2;
}


SWIGEXPORT jshort JNICALL Java_frc_robot_pixy_pixyJNI_IntersectionLine_1m_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  IntersectionLine *arg1 = (IntersectionLine *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntersectionLine **)&jarg1; 
  result = (uint8_t) ((arg1)->m_reserved);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_IntersectionLine_1m_1angle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  IntersectionLine *arg1 = (IntersectionLine *) 0 ;
  int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntersectionLine **)&jarg1; 
  arg2 = (int16_t)jarg2; 
  if (arg1) (arg1)->m_angle = arg2;
}


SWIGEXPORT jshort JNICALL Java_frc_robot_pixy_pixyJNI_IntersectionLine_1m_1angle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  IntersectionLine *arg1 = (IntersectionLine *) 0 ;
  int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntersectionLine **)&jarg1; 
  result = (int16_t) ((arg1)->m_angle);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_frc_robot_pixy_pixyJNI_new_1IntersectionLine(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IntersectionLine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IntersectionLine *)new IntersectionLine();
  *(IntersectionLine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_frc_robot_pixy_pixyJNI_delete_1IntersectionLine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IntersectionLine *arg1 = (IntersectionLine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IntersectionLine **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

